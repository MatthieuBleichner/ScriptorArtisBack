type Query {
  "List of all Tasks of this project."
  featuredTasks: [Task!]!
  "Retrieves a specific playlist."
  task(id: Int!): Task
  "List of all states of this project."
  states: [State!]
  "List of tasks associated to a state"
  tasksByState(id: Int!): [Task]
}

type Mutation {
  "Create a new task"
  createTask(input: createTaskInput): Task!
  "Update a task"
  updateTask(input: updateTaskInput): Task!
  "Delete a task"
  deleteTask(input: deleteTaskInput): Task!

}

"Define the status of a story to be done"
type State {
    "The id of the status"
    id: Int!
    "The name of the status"
    title: String!
    "The position of the status"
    index: Int!
    "The tasks associated to this status"
    tasks: [Task]
}

"Define a story to be done"
type Task {
    "The id of the task"
    id: Int!
    "The title of the task"
    title: String!
    "The description of the task"
    description: String
    "The state of the task - ToDo, OnGoing, Done"
    state: Int!
    "Who is the owner of this task"
    owner: User
}


type User {
    "The id of the user"
    id: Int!
    "The name of the user"
    firstName: String!
    "The last name of the user"
    lastName: String!
    "The email of the user"
    email: String!
    "List of tasks ids' handled by this user"
    tasks: [String]
}

input createTaskInput {
  title: String!
  description: String
  state: Int
  ownerId: Int
}

input updateTaskInput {
  id: Int!
  title: String
  description: String
  state: Int
  ownerId: Int
}

input deleteTaskInput {
  id: Int!
}
